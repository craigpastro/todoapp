// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlc

import (
	"context"
)

const create = `-- name: Create :one
insert into post (user_id, data)
values ($1, $2)
returning id, user_id, post_id, data, created_at, updated_at
`

type CreateParams struct {
	UserID string
	Data   string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Post, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.Data)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
delete from post
where user_id = $1 and post_id = $2
`

type DeleteParams struct {
	UserID string
	PostID string
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.UserID, arg.PostID)
	return err
}

const foo = `-- name: Foo :exec
select set_user_id($1)
`

func (q *Queries) Foo(ctx context.Context, setUserID interface{}) error {
	_, err := q.db.Exec(ctx, foo, setUserID)
	return err
}

const read = `-- name: Read :one
select id, user_id, post_id, data, created_at, updated_at
from post
where user_id = $1 and post_id = $2
`

type ReadParams struct {
	UserID string
	PostID string
}

func (q *Queries) Read(ctx context.Context, arg ReadParams) (Post, error) {
	row := q.db.QueryRow(ctx, read, arg.UserID, arg.PostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readPage = `-- name: ReadPage :many
select id, user_id, post_id, data, created_at, updated_at
from post
where user_id = $1
and id > $2
order by id asc
limit 100
`

type ReadPageParams struct {
	UserID string
	ID     int64
}

func (q *Queries) ReadPage(ctx context.Context, arg ReadPageParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, readPage, arg.UserID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsert = `-- name: Upsert :one
insert into post (user_id, post_id, data, created_at, updated_at)
values ($1, $2, $3, NOW(), NOW())
on conflict (user_id, post_id)
do update set data = $3, updated_at = NOW()
returning id, user_id, post_id, data, created_at, updated_at
`

type UpsertParams struct {
	UserID string
	PostID string
	Data   string
}

func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) (Post, error) {
	row := q.db.QueryRow(ctx, upsert, arg.UserID, arg.PostID, arg.Data)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
