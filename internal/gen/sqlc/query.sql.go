// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package sqlc

import (
	"context"
)

const create = `-- name: Create :one
insert into todoapp.todo (user_id, todo)
values ($1, $2)
returning id, user_id, todo_id, todo, created_at, updated_at
`

type CreateParams struct {
	UserID string
	Todo   string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (TodoappTodo, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.Todo)
	var i TodoappTodo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TodoID,
		&i.Todo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
delete from todoapp.todo
where user_id = $1 and todo_id = $2
`

type DeleteParams struct {
	UserID string
	TodoID string
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.UserID, arg.TodoID)
	return err
}

const read = `-- name: Read :one
select id, user_id, todo_id, todo, created_at, updated_at
from todoapp.todo
where user_id = $1 and todo_id = $2
`

type ReadParams struct {
	UserID string
	TodoID string
}

func (q *Queries) Read(ctx context.Context, arg ReadParams) (TodoappTodo, error) {
	row := q.db.QueryRow(ctx, read, arg.UserID, arg.TodoID)
	var i TodoappTodo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TodoID,
		&i.Todo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readPage = `-- name: ReadPage :many
select id, user_id, todo_id, todo, created_at, updated_at
from todoapp.todo
where user_id = $1
and id > $2
order by id asc
limit 100
`

type ReadPageParams struct {
	UserID string
	ID     int64
}

func (q *Queries) ReadPage(ctx context.Context, arg ReadPageParams) ([]TodoappTodo, error) {
	rows, err := q.db.Query(ctx, readPage, arg.UserID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoappTodo
	for rows.Next() {
		var i TodoappTodo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TodoID,
			&i.Todo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
update todoapp.todo
set todo = $1, updated_at = NOW()
where user_id  = $2 AND todo_id = $3
returning id, user_id, todo_id, todo, created_at, updated_at
`

type UpdateParams struct {
	Todo   string
	UserID string
	TodoID string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (TodoappTodo, error) {
	row := q.db.QueryRow(ctx, update, arg.Todo, arg.UserID, arg.TodoID)
	var i TodoappTodo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TodoID,
		&i.Todo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
