// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: crudapp/v1/service.proto

package crudappv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/craigpastro/crudapp/internal/gen/crudapp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CrudAppServiceName is the fully-qualified name of the CrudAppService service.
	CrudAppServiceName = "crudapp.v1.CrudAppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CrudAppServiceCreateProcedure is the fully-qualified name of the CrudAppService's Create RPC.
	CrudAppServiceCreateProcedure = "/crudapp.v1.CrudAppService/Create"
	// CrudAppServiceReadProcedure is the fully-qualified name of the CrudAppService's Read RPC.
	CrudAppServiceReadProcedure = "/crudapp.v1.CrudAppService/Read"
	// CrudAppServiceReadAllProcedure is the fully-qualified name of the CrudAppService's ReadAll RPC.
	CrudAppServiceReadAllProcedure = "/crudapp.v1.CrudAppService/ReadAll"
	// CrudAppServiceUpsertProcedure is the fully-qualified name of the CrudAppService's Upsert RPC.
	CrudAppServiceUpsertProcedure = "/crudapp.v1.CrudAppService/Upsert"
	// CrudAppServiceDeleteProcedure is the fully-qualified name of the CrudAppService's Delete RPC.
	CrudAppServiceDeleteProcedure = "/crudapp.v1.CrudAppService/Delete"
)

// CrudAppServiceClient is a client for the crudapp.v1.CrudAppService service.
type CrudAppServiceClient interface {
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Read(context.Context, *connect_go.Request[v1.ReadRequest]) (*connect_go.Response[v1.ReadResponse], error)
	ReadAll(context.Context, *connect_go.Request[v1.ReadAllRequest]) (*connect_go.Response[v1.ReadAllResponse], error)
	Upsert(context.Context, *connect_go.Request[v1.UpsertRequest]) (*connect_go.Response[v1.UpsertResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewCrudAppServiceClient constructs a client for the crudapp.v1.CrudAppService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCrudAppServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CrudAppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &crudAppServiceClient{
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+CrudAppServiceCreateProcedure,
			opts...,
		),
		read: connect_go.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+CrudAppServiceReadProcedure,
			opts...,
		),
		readAll: connect_go.NewClient[v1.ReadAllRequest, v1.ReadAllResponse](
			httpClient,
			baseURL+CrudAppServiceReadAllProcedure,
			opts...,
		),
		upsert: connect_go.NewClient[v1.UpsertRequest, v1.UpsertResponse](
			httpClient,
			baseURL+CrudAppServiceUpsertProcedure,
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+CrudAppServiceDeleteProcedure,
			opts...,
		),
	}
}

// crudAppServiceClient implements CrudAppServiceClient.
type crudAppServiceClient struct {
	create  *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	read    *connect_go.Client[v1.ReadRequest, v1.ReadResponse]
	readAll *connect_go.Client[v1.ReadAllRequest, v1.ReadAllResponse]
	upsert  *connect_go.Client[v1.UpsertRequest, v1.UpsertResponse]
	delete  *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls crudapp.v1.CrudAppService.Create.
func (c *crudAppServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Read calls crudapp.v1.CrudAppService.Read.
func (c *crudAppServiceClient) Read(ctx context.Context, req *connect_go.Request[v1.ReadRequest]) (*connect_go.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// ReadAll calls crudapp.v1.CrudAppService.ReadAll.
func (c *crudAppServiceClient) ReadAll(ctx context.Context, req *connect_go.Request[v1.ReadAllRequest]) (*connect_go.Response[v1.ReadAllResponse], error) {
	return c.readAll.CallUnary(ctx, req)
}

// Upsert calls crudapp.v1.CrudAppService.Upsert.
func (c *crudAppServiceClient) Upsert(ctx context.Context, req *connect_go.Request[v1.UpsertRequest]) (*connect_go.Response[v1.UpsertResponse], error) {
	return c.upsert.CallUnary(ctx, req)
}

// Delete calls crudapp.v1.CrudAppService.Delete.
func (c *crudAppServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// CrudAppServiceHandler is an implementation of the crudapp.v1.CrudAppService service.
type CrudAppServiceHandler interface {
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	Read(context.Context, *connect_go.Request[v1.ReadRequest]) (*connect_go.Response[v1.ReadResponse], error)
	ReadAll(context.Context, *connect_go.Request[v1.ReadAllRequest]) (*connect_go.Response[v1.ReadAllResponse], error)
	Upsert(context.Context, *connect_go.Request[v1.UpsertRequest]) (*connect_go.Response[v1.UpsertResponse], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewCrudAppServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCrudAppServiceHandler(svc CrudAppServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(CrudAppServiceCreateProcedure, connect_go.NewUnaryHandler(
		CrudAppServiceCreateProcedure,
		svc.Create,
		opts...,
	))
	mux.Handle(CrudAppServiceReadProcedure, connect_go.NewUnaryHandler(
		CrudAppServiceReadProcedure,
		svc.Read,
		opts...,
	))
	mux.Handle(CrudAppServiceReadAllProcedure, connect_go.NewUnaryHandler(
		CrudAppServiceReadAllProcedure,
		svc.ReadAll,
		opts...,
	))
	mux.Handle(CrudAppServiceUpsertProcedure, connect_go.NewUnaryHandler(
		CrudAppServiceUpsertProcedure,
		svc.Upsert,
		opts...,
	))
	mux.Handle(CrudAppServiceDeleteProcedure, connect_go.NewUnaryHandler(
		CrudAppServiceDeleteProcedure,
		svc.Delete,
		opts...,
	))
	return "/crudapp.v1.CrudAppService/", mux
}

// UnimplementedCrudAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCrudAppServiceHandler struct{}

func (UnimplementedCrudAppServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("crudapp.v1.CrudAppService.Create is not implemented"))
}

func (UnimplementedCrudAppServiceHandler) Read(context.Context, *connect_go.Request[v1.ReadRequest]) (*connect_go.Response[v1.ReadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("crudapp.v1.CrudAppService.Read is not implemented"))
}

func (UnimplementedCrudAppServiceHandler) ReadAll(context.Context, *connect_go.Request[v1.ReadAllRequest]) (*connect_go.Response[v1.ReadAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("crudapp.v1.CrudAppService.ReadAll is not implemented"))
}

func (UnimplementedCrudAppServiceHandler) Upsert(context.Context, *connect_go.Request[v1.UpsertRequest]) (*connect_go.Response[v1.UpsertResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("crudapp.v1.CrudAppService.Upsert is not implemented"))
}

func (UnimplementedCrudAppServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("crudapp.v1.CrudAppService.Delete is not implemented"))
}
